import os
from app import app
from app.metrics import Metrics
from pprint import pprint


def testcompute():
    from nlgeval import NLGEval

    os.environ["NLGEVAL_DATA"] = "/root/.cache/compfile"

    ref_list = [
        "    this is one reference sentence for sentence1",
        "   this is a reference sentence for sentence2 which was generated by your model"
    ]
    hyp_list = [
        "     this is the model generated sentence1 which seems good enough",
        "this is sentence2 which has been generated by your model     "
    ]

    m = Metrics()

    scores = m.compute(
        set(["bleu", "meteor", "cider", "rouge", "greedy_matching"]),
        hyp_list,
        ref_list
    )

    pprint(scores)

    n = NLGEval(
        no_overlap=False,
        no_skipthoughts=True,
        no_glove=False,
    )

    ref_list_list = [ref_list]
    scores = n.compute_metrics(
        ref_list=ref_list_list,
        hyp_list=hyp_list
    )

    pprint(scores)


@app.shell_context_processor
def make_shell_context():
    return {"a": testcompute, "m": Metrics(), "pprint": pprint}
